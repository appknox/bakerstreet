// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bakerstreet/bakerstreet.proto

package com_appknox_bakerstreet

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Data                 string   `protobuf:"bytes,1,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Apps struct {
	App                  []*App   `protobuf:"bytes,1,rep,name=App,proto3" json:"App,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Apps) Reset()         { *m = Apps{} }
func (m *Apps) String() string { return proto.CompactTextString(m) }
func (*Apps) ProtoMessage()    {}
func (*Apps) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{1}
}

func (m *Apps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Apps.Unmarshal(m, b)
}
func (m *Apps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Apps.Marshal(b, m, deterministic)
}
func (m *Apps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Apps.Merge(m, src)
}
func (m *Apps) XXX_Size() int {
	return xxx_messageInfo_Apps.Size(m)
}
func (m *Apps) XXX_DiscardUnknown() {
	xxx_messageInfo_Apps.DiscardUnknown(m)
}

var xxx_messageInfo_Apps proto.InternalMessageInfo

func (m *Apps) GetApp() []*App {
	if m != nil {
		return m.App
	}
	return nil
}

type App struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *App) Reset()         { *m = App{} }
func (m *App) String() string { return proto.CompactTextString(m) }
func (*App) ProtoMessage()    {}
func (*App) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{2}
}

func (m *App) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_App.Unmarshal(m, b)
}
func (m *App) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_App.Marshal(b, m, deterministic)
}
func (m *App) XXX_Merge(src proto.Message) {
	xxx_messageInfo_App.Merge(m, src)
}
func (m *App) XXX_Size() int {
	return xxx_messageInfo_App.Size(m)
}
func (m *App) XXX_DiscardUnknown() {
	xxx_messageInfo_App.DiscardUnknown(m)
}

var xxx_messageInfo_App proto.InternalMessageInfo

func (m *App) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Device struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	IsTablet             bool     `protobuf:"varint,2,opt,name=IsTablet,proto3" json:"IsTablet,omitempty"`
	Platform             int32    `protobuf:"varint,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	PlatformVersion      string   `protobuf:"bytes,4,opt,name=PlatformVersion,proto3" json:"PlatformVersion,omitempty"`
	CpuArchitecture      string   `protobuf:"bytes,5,opt,name=CpuArchitecture,proto3" json:"CpuArchitecture,omitempty"`
	Model                string   `protobuf:"bytes,6,opt,name=Model,proto3" json:"Model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{3}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device) GetIsTablet() bool {
	if m != nil {
		return m.IsTablet
	}
	return false
}

func (m *Device) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Device) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func (m *Device) GetCpuArchitecture() string {
	if m != nil {
		return m.CpuArchitecture
	}
	return ""
}

func (m *Device) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type Finding struct {
	Title                string   `protobuf:"bytes,1,opt,name=Title,proto3" json:"Title,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Finding) Reset()         { *m = Finding{} }
func (m *Finding) String() string { return proto.CompactTextString(m) }
func (*Finding) ProtoMessage()    {}
func (*Finding) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{4}
}

func (m *Finding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Finding.Unmarshal(m, b)
}
func (m *Finding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Finding.Marshal(b, m, deterministic)
}
func (m *Finding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Finding.Merge(m, src)
}
func (m *Finding) XXX_Size() int {
	return xxx_messageInfo_Finding.Size(m)
}
func (m *Finding) XXX_DiscardUnknown() {
	xxx_messageInfo_Finding.DiscardUnknown(m)
}

var xxx_messageInfo_Finding proto.InternalMessageInfo

func (m *Finding) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Finding) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type InstallReq struct {
	URL                  string   `protobuf:"bytes,1,opt,name=URL,proto3" json:"URL,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallReq) Reset()         { *m = InstallReq{} }
func (m *InstallReq) String() string { return proto.CompactTextString(m) }
func (*InstallReq) ProtoMessage()    {}
func (*InstallReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{5}
}

func (m *InstallReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallReq.Unmarshal(m, b)
}
func (m *InstallReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallReq.Marshal(b, m, deterministic)
}
func (m *InstallReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallReq.Merge(m, src)
}
func (m *InstallReq) XXX_Size() int {
	return xxx_messageInfo_InstallReq.Size(m)
}
func (m *InstallReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallReq.DiscardUnknown(m)
}

var xxx_messageInfo_InstallReq proto.InternalMessageInfo

func (m *InstallReq) GetURL() string {
	if m != nil {
		return m.URL
	}
	return ""
}

type ConfigProxyReq struct {
	IP                   string   `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                 string   `protobuf:"bytes,2,opt,name=Port,proto3" json:"Port,omitempty"`
	Hosts                []string `protobuf:"bytes,3,rep,name=Hosts,proto3" json:"Hosts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConfigProxyReq) Reset()         { *m = ConfigProxyReq{} }
func (m *ConfigProxyReq) String() string { return proto.CompactTextString(m) }
func (*ConfigProxyReq) ProtoMessage()    {}
func (*ConfigProxyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{6}
}

func (m *ConfigProxyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConfigProxyReq.Unmarshal(m, b)
}
func (m *ConfigProxyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConfigProxyReq.Marshal(b, m, deterministic)
}
func (m *ConfigProxyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConfigProxyReq.Merge(m, src)
}
func (m *ConfigProxyReq) XXX_Size() int {
	return xxx_messageInfo_ConfigProxyReq.Size(m)
}
func (m *ConfigProxyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ConfigProxyReq.DiscardUnknown(m)
}

var xxx_messageInfo_ConfigProxyReq proto.InternalMessageInfo

func (m *ConfigProxyReq) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *ConfigProxyReq) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

func (m *ConfigProxyReq) GetHosts() []string {
	if m != nil {
		return m.Hosts
	}
	return nil
}

type CleanOptions struct {
	DryRun               bool     `protobuf:"varint,1,opt,name=DryRun,proto3" json:"DryRun,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CleanOptions) Reset()         { *m = CleanOptions{} }
func (m *CleanOptions) String() string { return proto.CompactTextString(m) }
func (*CleanOptions) ProtoMessage()    {}
func (*CleanOptions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{7}
}

func (m *CleanOptions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CleanOptions.Unmarshal(m, b)
}
func (m *CleanOptions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CleanOptions.Marshal(b, m, deterministic)
}
func (m *CleanOptions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CleanOptions.Merge(m, src)
}
func (m *CleanOptions) XXX_Size() int {
	return xxx_messageInfo_CleanOptions.Size(m)
}
func (m *CleanOptions) XXX_DiscardUnknown() {
	xxx_messageInfo_CleanOptions.DiscardUnknown(m)
}

var xxx_messageInfo_CleanOptions proto.InternalMessageInfo

func (m *CleanOptions) GetDryRun() bool {
	if m != nil {
		return m.DryRun
	}
	return false
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_f25475ab4e67ac30, []int{8}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Message)(nil), "com.appknox.bakerstreet.Message")
	proto.RegisterType((*Apps)(nil), "com.appknox.bakerstreet.Apps")
	proto.RegisterType((*App)(nil), "com.appknox.bakerstreet.App")
	proto.RegisterType((*Device)(nil), "com.appknox.bakerstreet.Device")
	proto.RegisterType((*Finding)(nil), "com.appknox.bakerstreet.Finding")
	proto.RegisterType((*InstallReq)(nil), "com.appknox.bakerstreet.InstallReq")
	proto.RegisterType((*ConfigProxyReq)(nil), "com.appknox.bakerstreet.ConfigProxyReq")
	proto.RegisterType((*CleanOptions)(nil), "com.appknox.bakerstreet.CleanOptions")
	proto.RegisterType((*Empty)(nil), "com.appknox.bakerstreet.Empty")
}

func init() { proto.RegisterFile("bakerstreet/bakerstreet.proto", fileDescriptor_f25475ab4e67ac30) }

var fileDescriptor_f25475ab4e67ac30 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x95, 0xa6, 0xff, 0x76, 0x36, 0x3a, 0x64, 0x21, 0x08, 0x13, 0x1d, 0x51, 0x10, 0xd0,
	0xab, 0x20, 0x0d, 0x89, 0xfb, 0xaa, 0x1d, 0x5b, 0x47, 0xbb, 0x85, 0x68, 0x83, 0x0b, 0xae, 0xdc,
	0xd4, 0x6d, 0xad, 0xa6, 0xb1, 0xb1, 0x9d, 0x69, 0x7d, 0x03, 0x9e, 0x8a, 0x67, 0x43, 0x76, 0x93,
	0x52, 0x26, 0x65, 0x8d, 0x34, 0xee, 0xce, 0xf1, 0xf9, 0xf2, 0xcb, 0x39, 0xc7, 0x9f, 0x0c, 0xed,
	0x31, 0x5e, 0x10, 0x21, 0x95, 0x20, 0x44, 0x7d, 0xd8, 0x8a, 0x7d, 0x2e, 0x98, 0x62, 0xe8, 0x45,
	0xc4, 0x96, 0x3e, 0xe6, 0x7c, 0x91, 0xb0, 0x3b, 0x7f, 0xab, 0xec, 0xb5, 0xa1, 0x31, 0x22, 0x52,
	0xe2, 0x19, 0x41, 0x08, 0xaa, 0x7d, 0xac, 0xb0, 0x63, 0xb9, 0x56, 0x67, 0x2f, 0x34, 0xb1, 0xf7,
	0x09, 0xaa, 0x5d, 0xce, 0x25, 0xf2, 0xc1, 0xee, 0x72, 0xee, 0x58, 0xae, 0xdd, 0xd9, 0x3f, 0x79,
	0xe5, 0x17, 0xd0, 0xfc, 0x2e, 0xe7, 0xa1, 0x16, 0x7a, 0x2f, 0x8d, 0x5e, 0x23, 0x2f, 0xf1, 0x92,
	0xe4, 0x48, 0x1d, 0x7b, 0xbf, 0x2d, 0xa8, 0xf7, 0xc9, 0x2d, 0x8d, 0xcc, 0x1f, 0x6f, 0x52, 0x3a,
	0xc9, 0xcb, 0x3a, 0x46, 0x47, 0xd0, 0x1c, 0xc8, 0x6b, 0x3c, 0x8e, 0x89, 0x72, 0x2a, 0xae, 0xd5,
	0x69, 0x86, 0x9b, 0x5c, 0xd7, 0x82, 0x18, 0xab, 0x29, 0x13, 0x4b, 0xc7, 0x76, 0xad, 0x4e, 0x2d,
	0xdc, 0xe4, 0xa8, 0x03, 0x87, 0x79, 0xfc, 0x8d, 0x08, 0x49, 0x59, 0xe2, 0x54, 0x0d, 0xf6, 0xfe,
	0xb1, 0x56, 0xf6, 0x78, 0xda, 0x15, 0xd1, 0x9c, 0x2a, 0x12, 0xa9, 0x54, 0x10, 0xa7, 0xb6, 0x56,
	0xde, 0x3b, 0x46, 0xcf, 0xa0, 0x36, 0x62, 0x13, 0x12, 0x3b, 0x75, 0x53, 0x5f, 0x27, 0x5e, 0x17,
	0x1a, 0x9f, 0x69, 0x32, 0xa1, 0xc9, 0x4c, 0x0b, 0xae, 0xa9, 0x8a, 0xf3, 0x01, 0xd7, 0x09, 0x72,
	0x61, 0xbf, 0x4f, 0x64, 0x24, 0x28, 0x57, 0xba, 0x8d, 0x8a, 0xa9, 0x6d, 0x1f, 0x79, 0xc7, 0x00,
	0x83, 0x44, 0x2a, 0x1c, 0xc7, 0x21, 0xf9, 0x89, 0x9e, 0x82, 0x7d, 0x13, 0x0e, 0x33, 0x86, 0x0e,
	0xbd, 0x0b, 0x68, 0xf5, 0x58, 0x32, 0xa5, 0xb3, 0x40, 0xb0, 0xbb, 0x95, 0xd6, 0xb4, 0xa0, 0x32,
	0x08, 0x32, 0x49, 0x65, 0x10, 0xe8, 0xd5, 0x05, 0x4c, 0xa8, 0x0c, 0x6e, 0x62, 0xdd, 0xcd, 0x39,
	0x93, 0x4a, 0x3a, 0xb6, 0x6b, 0xeb, 0x6e, 0x4c, 0xe2, 0xbd, 0x83, 0x83, 0x5e, 0x4c, 0x70, 0x72,
	0x65, 0x7e, 0x2d, 0xd1, 0x73, 0xa8, 0xf7, 0xc5, 0x2a, 0x4c, 0x13, 0x43, 0x6b, 0x86, 0x59, 0xe6,
	0x35, 0xa0, 0x76, 0xba, 0xe4, 0x6a, 0x75, 0xf2, 0xab, 0x01, 0xcd, 0x11, 0x13, 0x14, 0x0b, 0xb5,
	0x42, 0x17, 0x50, 0x3d, 0x8d, 0xe6, 0x0c, 0xb9, 0x85, 0x77, 0x9e, 0xd9, 0xe7, 0x68, 0xa7, 0x02,
	0x7d, 0x81, 0xbd, 0x21, 0x4e, 0x93, 0x68, 0xae, 0xad, 0xf1, 0xa0, 0x89, 0x4a, 0xc0, 0x2e, 0x01,
	0xf4, 0x58, 0xc2, 0x6c, 0x08, 0x1d, 0x17, 0xea, 0xcd, 0x4c, 0x25, 0x78, 0x57, 0xb0, 0x7f, 0x4e,
	0x70, 0xac, 0xe6, 0xbd, 0x39, 0x89, 0x16, 0xff, 0x05, 0xf8, 0x24, 0x24, 0x4b, 0x76, 0x4b, 0x02,
	0x1c, 0x2d, 0xf4, 0xc1, 0x63, 0x27, 0xfe, 0x0e, 0xad, 0xcc, 0x34, 0x39, 0xf1, 0x4d, 0xe1, 0x37,
	0x7f, 0xdd, 0x55, 0x02, 0xfc, 0x23, 0x77, 0x5b, 0x2a, 0xc8, 0x7a, 0x9d, 0xef, 0x0b, 0xbf, 0xf9,
	0xd7, 0x96, 0x25, 0xe0, 0x5f, 0xe1, 0x70, 0x03, 0x3f, 0xc3, 0x93, 0x19, 0x51, 0x8f, 0x5e, 0x44,
	0x00, 0x35, 0xe3, 0x68, 0xf4, 0xb6, 0xb8, 0xcd, 0x2d, 0xc7, 0x97, 0x20, 0x9e, 0x41, 0x75, 0x90,
	0x4c, 0xd9, 0xce, 0x5b, 0x7f, 0x5d, 0x58, 0xcf, 0x5e, 0xb4, 0x11, 0x1c, 0x0c, 0xa9, 0x54, 0xd9,
	0x05, 0xc9, 0x9d, 0xc0, 0xf6, 0x43, 0xab, 0x90, 0xe3, 0xba, 0x79, 0xbd, 0x3f, 0xfe, 0x09, 0x00,
	0x00, 0xff, 0xff, 0x66, 0xe7, 0x08, 0xcf, 0xde, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MoriartyClient is the client API for Moriarty service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MoriartyClient interface {
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	LaunchApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Message, error)
	ClearProxy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error)
	RemovePackage(ctx context.Context, in *App, opts ...grpc.CallOption) (*Message, error)
	InstallPackage(ctx context.Context, in *InstallReq, opts ...grpc.CallOption) (*Message, error)
	ConfigureProxy(ctx context.Context, in *ConfigProxyReq, opts ...grpc.CallOption) (*Message, error)
	ConfigureGadget(ctx context.Context, in *App, opts ...grpc.CallOption) (*Message, error)
	Clean(ctx context.Context, in *CleanOptions, opts ...grpc.CallOption) (*Message, error)
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Device, error)
	ListPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Apps, error)
}

type moriartyClient struct {
	cc *grpc.ClientConn
}

func NewMoriartyClient(cc *grpc.ClientConn) MoriartyClient {
	return &moriartyClient{cc}
}

func (c *moriartyClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) LaunchApp(ctx context.Context, in *App, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/LaunchApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ClearProxy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ClearProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) RemovePackage(ctx context.Context, in *App, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/RemovePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) InstallPackage(ctx context.Context, in *InstallReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/InstallPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ConfigureProxy(ctx context.Context, in *ConfigProxyReq, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ConfigureProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ConfigureGadget(ctx context.Context, in *App, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ConfigureGadget", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) Clean(ctx context.Context, in *CleanOptions, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/Clean", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ListPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Apps, error) {
	out := new(Apps)
	err := c.cc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MoriartyServer is the server API for Moriarty service.
type MoriartyServer interface {
	Echo(context.Context, *Message) (*Message, error)
	LaunchApp(context.Context, *App) (*Message, error)
	ClearProxy(context.Context, *Empty) (*Message, error)
	HealthCheck(context.Context, *Empty) (*Message, error)
	RemovePackage(context.Context, *App) (*Message, error)
	InstallPackage(context.Context, *InstallReq) (*Message, error)
	ConfigureProxy(context.Context, *ConfigProxyReq) (*Message, error)
	ConfigureGadget(context.Context, *App) (*Message, error)
	Clean(context.Context, *CleanOptions) (*Message, error)
	Info(context.Context, *Empty) (*Device, error)
	ListPackages(context.Context, *Empty) (*Apps, error)
}

// UnimplementedMoriartyServer can be embedded to have forward compatible implementations.
type UnimplementedMoriartyServer struct {
}

func (*UnimplementedMoriartyServer) Echo(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (*UnimplementedMoriartyServer) LaunchApp(ctx context.Context, req *App) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchApp not implemented")
}
func (*UnimplementedMoriartyServer) ClearProxy(ctx context.Context, req *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearProxy not implemented")
}
func (*UnimplementedMoriartyServer) HealthCheck(ctx context.Context, req *Empty) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedMoriartyServer) RemovePackage(ctx context.Context, req *App) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePackage not implemented")
}
func (*UnimplementedMoriartyServer) InstallPackage(ctx context.Context, req *InstallReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallPackage not implemented")
}
func (*UnimplementedMoriartyServer) ConfigureProxy(ctx context.Context, req *ConfigProxyReq) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureProxy not implemented")
}
func (*UnimplementedMoriartyServer) ConfigureGadget(ctx context.Context, req *App) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureGadget not implemented")
}
func (*UnimplementedMoriartyServer) Clean(ctx context.Context, req *CleanOptions) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clean not implemented")
}
func (*UnimplementedMoriartyServer) Info(ctx context.Context, req *Empty) (*Device, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (*UnimplementedMoriartyServer) ListPackages(ctx context.Context, req *Empty) (*Apps, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}

func RegisterMoriartyServer(s *grpc.Server, srv MoriartyServer) {
	s.RegisterService(&_Moriarty_serviceDesc, srv)
}

func _Moriarty_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_LaunchApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).LaunchApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/LaunchApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).LaunchApp(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ClearProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ClearProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ClearProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ClearProxy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/RemovePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).RemovePackage(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_InstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).InstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/InstallPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).InstallPackage(ctx, req.(*InstallReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ConfigureProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigProxyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ConfigureProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ConfigureProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ConfigureProxy(ctx, req.(*ConfigProxyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ConfigureGadget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(App)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ConfigureGadget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ConfigureGadget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ConfigureGadget(ctx, req.(*App))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_Clean_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).Clean(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/Clean",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).Clean(ctx, req.(*CleanOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ListPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Moriarty_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.appknox.bakerstreet.Moriarty",
	HandlerType: (*MoriartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Moriarty_Echo_Handler,
		},
		{
			MethodName: "LaunchApp",
			Handler:    _Moriarty_LaunchApp_Handler,
		},
		{
			MethodName: "ClearProxy",
			Handler:    _Moriarty_ClearProxy_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Moriarty_HealthCheck_Handler,
		},
		{
			MethodName: "RemovePackage",
			Handler:    _Moriarty_RemovePackage_Handler,
		},
		{
			MethodName: "InstallPackage",
			Handler:    _Moriarty_InstallPackage_Handler,
		},
		{
			MethodName: "ConfigureProxy",
			Handler:    _Moriarty_ConfigureProxy_Handler,
		},
		{
			MethodName: "ConfigureGadget",
			Handler:    _Moriarty_ConfigureGadget_Handler,
		},
		{
			MethodName: "Clean",
			Handler:    _Moriarty_Clean_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Moriarty_Info_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _Moriarty_ListPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bakerstreet/bakerstreet.proto",
}
