// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bakerstreet.proto

/*
Package com_appknox_bakerstreet is a generated protocol buffer package.

It is generated from these files:
	bakerstreet.proto

It has these top-level messages:
	Message
	Packages
	Device
*/
package com_appknox_bakerstreet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Title       string `protobuf:"bytes,1,opt,name=Title,json=title" json:"Title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,json=description" json:"Description,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Message) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Packages struct {
	Names []string `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *Packages) Reset()                    { *m = Packages{} }
func (m *Packages) String() string            { return proto.CompactTextString(m) }
func (*Packages) ProtoMessage()               {}
func (*Packages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Packages) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Device struct {
	Uuid            string `protobuf:"bytes,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	IsTablet        bool   `protobuf:"varint,2,opt,name=IsTablet,json=isTablet" json:"IsTablet,omitempty"`
	Platform        int32  `protobuf:"varint,3,opt,name=Platform,json=platform" json:"Platform,omitempty"`
	PlatformVersion string `protobuf:"bytes,4,opt,name=PlatformVersion,json=platformVersion" json:"PlatformVersion,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Device) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device) GetIsTablet() bool {
	if m != nil {
		return m.IsTablet
	}
	return false
}

func (m *Device) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Device) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "com.appknox.bakerstreet.Message")
	proto.RegisterType((*Packages)(nil), "com.appknox.bakerstreet.Packages")
	proto.RegisterType((*Device)(nil), "com.appknox.bakerstreet.Device")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bakerstreet service

type BakerstreetClient interface {
	Info(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Device, error)
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	LaunchApp(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	RemovePackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	InstallPackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ListPackages(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Packages, error)
}

type bakerstreetClient struct {
	cc *grpc.ClientConn
}

func NewBakerstreetClient(cc *grpc.ClientConn) BakerstreetClient {
	return &bakerstreetClient{cc}
}

func (c *bakerstreetClient) Info(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakerstreetClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakerstreetClient) LaunchApp(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/LaunchApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakerstreetClient) HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakerstreetClient) RemovePackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/RemovePackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakerstreetClient) InstallPackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/InstallPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bakerstreetClient) ListPackages(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Packages, error) {
	out := new(Packages)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Bakerstreet/ListPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bakerstreet service

type BakerstreetServer interface {
	Info(context.Context, *Message) (*Device, error)
	Echo(context.Context, *Message) (*Message, error)
	LaunchApp(context.Context, *Message) (*Message, error)
	HealthCheck(context.Context, *Message) (*Message, error)
	RemovePackage(context.Context, *Message) (*Message, error)
	InstallPackage(context.Context, *Message) (*Message, error)
	ListPackages(context.Context, *Message) (*Packages, error)
}

func RegisterBakerstreetServer(s *grpc.Server, srv BakerstreetServer) {
	s.RegisterService(&_Bakerstreet_serviceDesc, srv)
}

func _Bakerstreet_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).Info(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bakerstreet_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bakerstreet_LaunchApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).LaunchApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/LaunchApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).LaunchApp(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bakerstreet_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).HealthCheck(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bakerstreet_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/RemovePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).RemovePackage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bakerstreet_InstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).InstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/InstallPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).InstallPackage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bakerstreet_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BakerstreetServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Bakerstreet/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BakerstreetServer).ListPackages(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bakerstreet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.appknox.bakerstreet.Bakerstreet",
	HandlerType: (*BakerstreetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Bakerstreet_Info_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Bakerstreet_Echo_Handler,
		},
		{
			MethodName: "LaunchApp",
			Handler:    _Bakerstreet_LaunchApp_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Bakerstreet_HealthCheck_Handler,
		},
		{
			MethodName: "RemovePackage",
			Handler:    _Bakerstreet_RemovePackage_Handler,
		},
		{
			MethodName: "InstallPackage",
			Handler:    _Bakerstreet_InstallPackage_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _Bakerstreet_ListPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bakerstreet.proto",
}

func init() { proto.RegisterFile("bakerstreet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x4f, 0x4f, 0xf2, 0x40,
	0x10, 0xc6, 0xd3, 0x97, 0xc2, 0x5b, 0xa6, 0x2a, 0x71, 0x63, 0x62, 0xc3, 0xc5, 0xca, 0x89, 0x53,
	0x0f, 0xfa, 0x09, 0x50, 0x4c, 0xac, 0x41, 0xc5, 0x82, 0xde, 0x97, 0x65, 0xa0, 0x9b, 0xfe, 0xd9,
	0x4d, 0x77, 0x4b, 0x3c, 0xf9, 0xf9, 0xfc, 0x58, 0xa6, 0xcd, 0x22, 0x7a, 0x20, 0x78, 0xe8, 0xf1,
	0x99, 0xe7, 0xc9, 0x6f, 0x77, 0x66, 0x77, 0xe0, 0x74, 0x41, 0x13, 0x2c, 0x94, 0x2e, 0x10, 0x75,
	0x20, 0x0b, 0xa1, 0x05, 0x39, 0x67, 0x22, 0x0b, 0xa8, 0x94, 0x49, 0x2e, 0xde, 0x83, 0x1f, 0xf6,
	0x60, 0x04, 0xff, 0x1f, 0x51, 0x29, 0xba, 0x46, 0x72, 0x06, 0xed, 0x39, 0xd7, 0x29, 0x7a, 0x96,
	0x6f, 0x0d, 0xbb, 0x51, 0x5b, 0x57, 0x82, 0xf8, 0xe0, 0x8e, 0x51, 0xb1, 0x82, 0x4b, 0xcd, 0x45,
	0xee, 0xfd, 0xab, 0x3d, 0x77, 0xb9, 0x2b, 0x0d, 0x7c, 0x70, 0xa6, 0x94, 0x25, 0x74, 0x8d, 0xaa,
	0x62, 0x3c, 0xd1, 0x0c, 0x95, 0x67, 0xf9, 0xad, 0x8a, 0x91, 0x57, 0x62, 0xf0, 0x01, 0x9d, 0x31,
	0x6e, 0x38, 0x43, 0x42, 0xc0, 0x7e, 0x2d, 0xf9, 0xd2, 0x1c, 0x61, 0x97, 0x25, 0x5f, 0x92, 0x3e,
	0x38, 0xa1, 0x9a, 0xd3, 0x45, 0x8a, 0xba, 0xc6, 0x3b, 0x91, 0xc3, 0x8d, 0xae, 0xbc, 0x69, 0x4a,
	0xf5, 0x4a, 0x14, 0x99, 0xd7, 0xf2, 0xad, 0x61, 0x3b, 0x72, 0xa4, 0xd1, 0x64, 0x08, 0xbd, 0xad,
	0xf7, 0x86, 0x85, 0xaa, 0x6e, 0x67, 0xd7, 0xd8, 0x9e, 0xfc, 0x5d, 0xbe, 0xfa, 0xb4, 0xc1, 0xbd,
	0xd9, 0x35, 0x4d, 0x42, 0xb0, 0xc3, 0x7c, 0x25, 0x88, 0x1f, 0xec, 0x19, 0x4b, 0x60, 0x66, 0xd2,
	0xbf, 0xd8, 0x9b, 0x30, 0x0d, 0x3d, 0x80, 0x7d, 0xc7, 0xe2, 0xbf, 0xa0, 0x0e, 0x26, 0xc8, 0x33,
	0x74, 0x27, 0xb4, 0xcc, 0x59, 0x3c, 0x92, 0xb2, 0x11, 0xe0, 0x0b, 0xb8, 0xf7, 0x48, 0x53, 0x1d,
	0xdf, 0xc6, 0xc8, 0x92, 0x46, 0x90, 0x33, 0x38, 0x8e, 0x30, 0x13, 0x1b, 0x34, 0x4f, 0xde, 0x08,
	0x74, 0x0e, 0x27, 0x61, 0xae, 0x34, 0x4d, 0xd3, 0x26, 0xa9, 0x33, 0x38, 0x9a, 0x70, 0xa5, 0xbf,
	0xff, 0xe6, 0x61, 0xe6, 0xe5, 0xde, 0xc4, 0x16, 0xb2, 0xe8, 0xd4, 0xfb, 0x74, 0xfd, 0x15, 0x00,
	0x00, 0xff, 0xff, 0x9e, 0x5b, 0xca, 0x47, 0x64, 0x03, 0x00, 0x00,
}
