// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bakerstreet.proto

/*
Package com_appknox_bakerstreet is a generated protocol buffer package.

It is generated from these files:
	bakerstreet.proto

It has these top-level messages:
	Message
	Packages
	Device
	Finding
*/
package com_appknox_bakerstreet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Message struct {
	Data        string `protobuf:"bytes,1,opt,name=Data,json=data" json:"Data,omitempty"`
	Title       string `protobuf:"bytes,2,opt,name=Title,json=title" json:"Title,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description,json=description" json:"Description,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Message) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *Message) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Message) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type Packages struct {
	Names []string `protobuf:"bytes,1,rep,name=Names,json=names" json:"Names,omitempty"`
}

func (m *Packages) Reset()                    { *m = Packages{} }
func (m *Packages) String() string            { return proto.CompactTextString(m) }
func (*Packages) ProtoMessage()               {}
func (*Packages) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Packages) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

type Device struct {
	Uuid            string `protobuf:"bytes,1,opt,name=Uuid,json=uuid" json:"Uuid,omitempty"`
	IsTablet        bool   `protobuf:"varint,2,opt,name=IsTablet,json=isTablet" json:"IsTablet,omitempty"`
	Platform        int32  `protobuf:"varint,3,opt,name=Platform,json=platform" json:"Platform,omitempty"`
	PlatformVersion string `protobuf:"bytes,4,opt,name=PlatformVersion,json=platformVersion" json:"PlatformVersion,omitempty"`
}

func (m *Device) Reset()                    { *m = Device{} }
func (m *Device) String() string            { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()               {}
func (*Device) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Device) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Device) GetIsTablet() bool {
	if m != nil {
		return m.IsTablet
	}
	return false
}

func (m *Device) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *Device) GetPlatformVersion() string {
	if m != nil {
		return m.PlatformVersion
	}
	return ""
}

type Finding struct {
	Title       string `protobuf:"bytes,1,opt,name=Title,json=title" json:"Title,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=Description,json=description" json:"Description,omitempty"`
}

func (m *Finding) Reset()                    { *m = Finding{} }
func (m *Finding) String() string            { return proto.CompactTextString(m) }
func (*Finding) ProtoMessage()               {}
func (*Finding) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Finding) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Finding) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "com.appknox.bakerstreet.Message")
	proto.RegisterType((*Packages)(nil), "com.appknox.bakerstreet.Packages")
	proto.RegisterType((*Device)(nil), "com.appknox.bakerstreet.Device")
	proto.RegisterType((*Finding)(nil), "com.appknox.bakerstreet.Finding")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Moriarty service

type MoriartyClient interface {
	Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	LaunchApp(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ClearProxy(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	RemovePackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	InstallPackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ConfigureProxy(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	ConfigureGadget(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	Info(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Device, error)
	ListPackages(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Packages, error)
}

type moriartyClient struct {
	cc *grpc.ClientConn
}

func NewMoriartyClient(cc *grpc.ClientConn) MoriartyClient {
	return &moriartyClient{cc}
}

func (c *moriartyClient) Echo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) LaunchApp(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/LaunchApp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ClearProxy(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ClearProxy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) HealthCheck(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/HealthCheck", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) RemovePackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/RemovePackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) InstallPackage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/InstallPackage", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ConfigureProxy(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ConfigureProxy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ConfigureGadget(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ConfigureGadget", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) Info(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Device, error) {
	out := new(Device)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/Info", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *moriartyClient) ListPackages(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Packages, error) {
	out := new(Packages)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Moriarty/ListPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Moriarty service

type MoriartyServer interface {
	Echo(context.Context, *Message) (*Message, error)
	LaunchApp(context.Context, *Message) (*Message, error)
	ClearProxy(context.Context, *Message) (*Message, error)
	HealthCheck(context.Context, *Message) (*Message, error)
	RemovePackage(context.Context, *Message) (*Message, error)
	InstallPackage(context.Context, *Message) (*Message, error)
	ConfigureProxy(context.Context, *Message) (*Message, error)
	ConfigureGadget(context.Context, *Message) (*Message, error)
	Info(context.Context, *Message) (*Device, error)
	ListPackages(context.Context, *Message) (*Packages, error)
}

func RegisterMoriartyServer(s *grpc.Server, srv MoriartyServer) {
	s.RegisterService(&_Moriarty_serviceDesc, srv)
}

func _Moriarty_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).Echo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_LaunchApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).LaunchApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/LaunchApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).LaunchApp(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ClearProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ClearProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ClearProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ClearProxy(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).HealthCheck(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_RemovePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).RemovePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/RemovePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).RemovePackage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_InstallPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).InstallPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/InstallPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).InstallPackage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ConfigureProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ConfigureProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ConfigureProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ConfigureProxy(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ConfigureGadget_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ConfigureGadget(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ConfigureGadget",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ConfigureGadget(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).Info(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Moriarty_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MoriartyServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Moriarty/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MoriartyServer).ListPackages(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _Moriarty_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.appknox.bakerstreet.Moriarty",
	HandlerType: (*MoriartyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Moriarty_Echo_Handler,
		},
		{
			MethodName: "LaunchApp",
			Handler:    _Moriarty_LaunchApp_Handler,
		},
		{
			MethodName: "ClearProxy",
			Handler:    _Moriarty_ClearProxy_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _Moriarty_HealthCheck_Handler,
		},
		{
			MethodName: "RemovePackage",
			Handler:    _Moriarty_RemovePackage_Handler,
		},
		{
			MethodName: "InstallPackage",
			Handler:    _Moriarty_InstallPackage_Handler,
		},
		{
			MethodName: "ConfigureProxy",
			Handler:    _Moriarty_ConfigureProxy_Handler,
		},
		{
			MethodName: "ConfigureGadget",
			Handler:    _Moriarty_ConfigureGadget_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Moriarty_Info_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _Moriarty_ListPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bakerstreet.proto",
}

// Client API for Mycroft service

type MycroftClient interface {
	Poll(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Message, error)
	PushFinding(ctx context.Context, in *Finding, opts ...grpc.CallOption) (*Message, error)
}

type mycroftClient struct {
	cc *grpc.ClientConn
}

func NewMycroftClient(cc *grpc.ClientConn) MycroftClient {
	return &mycroftClient{cc}
}

func (c *mycroftClient) Poll(ctx context.Context, in *Device, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Mycroft/Poll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mycroftClient) PushFinding(ctx context.Context, in *Finding, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := grpc.Invoke(ctx, "/com.appknox.bakerstreet.Mycroft/PushFinding", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Mycroft service

type MycroftServer interface {
	Poll(context.Context, *Device) (*Message, error)
	PushFinding(context.Context, *Finding) (*Message, error)
}

func RegisterMycroftServer(s *grpc.Server, srv MycroftServer) {
	s.RegisterService(&_Mycroft_serviceDesc, srv)
}

func _Mycroft_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Device)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MycroftServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Mycroft/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MycroftServer).Poll(ctx, req.(*Device))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mycroft_PushFinding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Finding)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MycroftServer).PushFinding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.appknox.bakerstreet.Mycroft/PushFinding",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MycroftServer).PushFinding(ctx, req.(*Finding))
	}
	return interceptor(ctx, in, info, handler)
}

var _Mycroft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.appknox.bakerstreet.Mycroft",
	HandlerType: (*MycroftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Poll",
			Handler:    _Mycroft_Poll_Handler,
		},
		{
			MethodName: "PushFinding",
			Handler:    _Mycroft_PushFinding_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bakerstreet.proto",
}

func init() { proto.RegisterFile("bakerstreet.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0xe5, 0xd6, 0x49, 0xdc, 0x09, 0x10, 0xb1, 0x42, 0x22, 0xea, 0x05, 0x93, 0x53, 0x4f,
	0x3e, 0x94, 0x27, 0xa8, 0x12, 0x3e, 0x82, 0x1a, 0x30, 0x69, 0xc2, 0x7d, 0x62, 0x4f, 0xec, 0x55,
	0x36, 0xbb, 0xd6, 0xee, 0xb8, 0x6a, 0x2e, 0xbc, 0x0e, 0x2f, 0xc2, 0x83, 0x21, 0x5b, 0x4e, 0x0b,
	0x42, 0x21, 0x39, 0xf8, 0x38, 0x1f, 0xfb, 0xfb, 0xcf, 0x8c, 0x66, 0x16, 0x5e, 0xae, 0x70, 0x43,
	0xd6, 0xb1, 0x25, 0xe2, 0xa8, 0xb0, 0x86, 0x8d, 0x78, 0x9d, 0x98, 0x6d, 0x84, 0x45, 0xb1, 0xd1,
	0xe6, 0x21, 0xfa, 0x23, 0x3c, 0x5a, 0x42, 0x6f, 0x46, 0xce, 0x61, 0x46, 0x42, 0x80, 0x3f, 0x41,
	0xc6, 0xa1, 0x17, 0x7a, 0x57, 0x17, 0x73, 0x3f, 0x45, 0x46, 0xf1, 0x0a, 0x3a, 0x0b, 0xc9, 0x8a,
	0x86, 0x67, 0xb5, 0xb3, 0xc3, 0x95, 0x21, 0x42, 0xe8, 0x4f, 0xc8, 0x25, 0x56, 0x16, 0x2c, 0x8d,
	0x1e, 0x9e, 0xd7, 0xb1, 0x7e, 0xfa, 0xe4, 0x1a, 0x85, 0x10, 0xc4, 0x98, 0x6c, 0x30, 0x23, 0x57,
	0x31, 0xbe, 0xe0, 0x96, 0xdc, 0xd0, 0x0b, 0xcf, 0x2b, 0x86, 0xae, 0x8c, 0xd1, 0x0f, 0xe8, 0x4e,
	0xe8, 0x5e, 0x26, 0xb5, 0xee, 0xb2, 0x94, 0xe9, 0x5e, 0xb7, 0x2c, 0x65, 0x2a, 0x2e, 0x21, 0x98,
	0xba, 0x05, 0xae, 0x14, 0x71, 0x2d, 0x1d, 0xcc, 0x03, 0xd9, 0xd8, 0x55, 0x2c, 0x56, 0xc8, 0x6b,
	0x63, 0xb7, 0xb5, 0x74, 0x67, 0x1e, 0x14, 0x8d, 0x2d, 0xae, 0x60, 0xb0, 0x8f, 0x7d, 0x27, 0xeb,
	0xaa, 0xea, 0xfc, 0x1a, 0x3b, 0x28, 0xfe, 0x76, 0x8f, 0x6e, 0xa0, 0xf7, 0x41, 0xea, 0x54, 0xea,
	0xec, 0xa9, 0x49, 0xef, 0x3f, 0x4d, 0x9e, 0xfd, 0xd3, 0xe4, 0xf5, 0xaf, 0x2e, 0x04, 0x33, 0x63,
	0x25, 0x5a, 0xde, 0x89, 0xcf, 0xe0, 0xbf, 0x4f, 0x72, 0x23, 0xc2, 0xe8, 0xc0, 0xa8, 0xa3, 0x66,
	0xce, 0x97, 0x47, 0x33, 0xc4, 0x57, 0xb8, 0xb8, 0xc5, 0x52, 0x27, 0xf9, 0x4d, 0x51, 0xb4, 0x02,
	0x8c, 0x01, 0xc6, 0x8a, 0xd0, 0xc6, 0xd6, 0x3c, 0xec, 0x5a, 0x21, 0x7e, 0x83, 0xfe, 0x27, 0x42,
	0xc5, 0xf9, 0x38, 0xa7, 0x64, 0xd3, 0x0a, 0xf2, 0x0e, 0x9e, 0xcf, 0x69, 0x6b, 0xee, 0xa9, 0xd9,
	0x9c, 0x56, 0xa0, 0x0b, 0x78, 0x31, 0xd5, 0x8e, 0x51, 0xa9, 0x96, 0xa9, 0x63, 0xa3, 0xd7, 0x32,
	0x2b, 0x2d, 0xb5, 0x37, 0xd3, 0x25, 0x0c, 0x1e, 0xa9, 0x1f, 0x31, 0xcd, 0x88, 0x5b, 0xc1, 0x4e,
	0xc1, 0x9f, 0xea, 0xf5, 0x29, 0x9b, 0xf9, 0xe6, 0x60, 0x46, 0x73, 0xaa, 0x77, 0xf0, 0xec, 0x56,
	0x3a, 0x7e, 0x3c, 0xed, 0xe3, 0xc8, 0xb7, 0x07, 0x33, 0xf6, 0x90, 0xeb, 0x9f, 0x1e, 0xf4, 0x66,
	0xbb, 0xc4, 0x9a, 0x35, 0x57, 0xb5, 0xc6, 0x46, 0x29, 0x71, 0xac, 0x92, 0xd3, 0x36, 0x34, 0x2e,
	0x5d, 0xbe, 0x3f, 0xf2, 0xc3, 0x0f, 0x9a, 0x8c, 0xe3, 0xc8, 0x55, 0xb7, 0xfe, 0x4c, 0xdf, 0xfd,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x61, 0xda, 0x31, 0x61, 0x05, 0x00, 0x00,
}
